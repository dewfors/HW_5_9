
1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).

user1 = User.objects.create_user('Иванов')
user2 = User.objects.create_user('Петров')

2. Создать два объекта модели Author, связанные с пользователями.

author1 = Author.objects.create(user=user1)
author2 = Author.objects.create(user=user2)

3. Добавить 4 категории в модель Category.

cat1 = Category.objects.create(title='Спорт')
cat2 = Category.objects.create(title='Крипта')
cat3 = Category.objects.create(title='Недвижимость')
cat4 = Category.objects.create(title='Экономика')

4. Добавить 2 статьи и 1 новость.

post1 = Post.objects.create(title='BTC - рынок спит, но скоро он проснется!', type=Post.post, article_text='На прошлой неделе я вам намеках о том, что планируется боковое движение данной фразой, как сейчас в заголовке. наблюдательные оценят. В этом видео отметил новые цели, торговые зоны и уровни. Все как обычно и смоделировал варианты поведения цены на эту торговую неделю. Пока боковик и сужение в треугольнике, но скоро будем выходить из боковой спячки. Стоит приготовится и учесть риски по #BTC Приятного просмотра.', author=author1)


post2 = Post.objects.create(title='Ripple (#XRP). Треугольник сформирован', type=Post.post, article_text='Предполагаю, что треугольник, формировавшийся с декабря 2017 года, полностью завершил своё формирование. Структурные сигналы: - наблюдаем 5 зиг-загов в структуре; - цели, согласно уровням Фибо достигнуты; - на данный момент цена отскочила от нижней границы глобального импульсного канала, что может говорить о завершении формирования волны [E] треугольника; - отскок закрепился надельной свечой с бычьем поглащением.', author=author1)


news1 = Post.objects.create(title='Теннисный мир шокирован допинг-скандалом', type=Post.news, article_text='О деле Синнера сообщило Международное агентство по обеспечению честности в теннисе (ITIA). Организация выпустила пресс-релиз, в котором изложила, что теннисист в марте сдал два положительных допинг-теста, но избежал дисквалификации. Расследование установило, что образцы были загрязнены спреем, который физиотерапевт Синнера использовал для лечения пореза на собственном пальце. К Яннику частицы попали после массажа, который физио по неосторожности сделал ему без перчаток. Итальянец по ходу расследования обжаловал все полагающиеся отстранения.', author=author2)


5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

PostCategory.objects.create(post=post1, category=cat2)
PostCategory.objects.create(post=post1, category=cat4)

PostCategory.objects.create(post=post2, category=cat2)
PostCategory.objects.create(post=post2, category=cat4)

PostCategory.objects.create(post=news1, category=cat1)


6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

comment1 = Comment.objects.create(comment_text='Прекрасно!', post = post1, user=user1)
comment2 = Comment.objects.create(comment_text='хорошо!', post = post1, user=user2)
comment3 = Comment.objects.create(comment_text='Непонятно!', post = post2, user=user2)
comment4 = Comment.objects.create(comment_text='Странно!', post = news1, user=user1)


7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()

Post.objects.get(pk=2).like()


Post.objects.get(pk=3).like()
Post.objects.get(pk=3).like()
Post.objects.get(pk=3).like()

Comment.objects.get(pk=1).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=4).like()
Comment.objects.get(pk=4).like()
Comment.objects.get(pk=4).like()
Comment.objects.get(pk=4).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=4).like()

Comment.objects.get(pk=4).dislike()


8. Обновить рейтинги пользователей.

Author.objects.get(pk=1).update_rating()
Author.objects.get(pk=2).update_rating()


9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

best_user = Author.objects.all().order_by('-rating')[0]
best_user_info = f'Лучший пользователь: {best_user.user}, рейтинг - {best_user.rating}'
print(best_user_info)

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

best_post = Post.objects.all().order_by('-rating')[0]
print(best_post.time_create.date()) 
print(best_post.author.user.username)
print(best_post.rating)
print(best_post.title)
print(best_post.preview())


11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

Comment.objects.filter(post=best_post).values('time_create', 'user', 'rating', 'comment_text') 

comments_best_post = Comment.objects.filter(post=best_post)
for comment in comments_best_post:
	print(f'{comment.time_create.date()}, {comment.user.username}, {comment.rating}, {comment.comment_text}')

